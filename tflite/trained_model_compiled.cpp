/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.04.2022 10:11:08

#include <ei/porting/ei_classifier_porting.h>
#include <ei/tensorflow/lite/c/builtin_op_data.h>
#include <ei/tensorflow/lite/c/common.h>
#include <ei/tensorflow/lite/micro/micro_mutable_op_resolver.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 480;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteEvalTensor tflEvalTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(16) float tensor_data1[5] = { 0.15490357577800751, -0.01768113300204277, 0.096213638782501221, -0.15626896917819977, -0.15337371826171875, };
const TfArray<1, int> tensor_dimension1 = { 1, { 5 } };
const ALIGN(16) float tensor_data2[11] = { -0.020636085420846939, 0.13154011964797974, -0.012380585074424744, -0.080014310777187347, -0.13835485279560089, 0.21521131694316864, 0.65814030170440674, 0.061121579259634018, -0.011499641463160515, 0.03700406476855278, 0.108773373067379, };
const TfArray<1, int> tensor_dimension2 = { 1, { 11 } };
const ALIGN(16) float tensor_data3[18] = { 0.16524524986743927, 0.24093708395957947, -0.074927709996700287, 0.057929962873458862, -0.20587697625160217, 0.2778838574886322, -0.0057748686522245407, 0.2754381000995636, -0.010068702511489391, 0.19650968909263611, 0.2938711941242218, 0.17347551882266998, -0.17470979690551758, -0.057059068232774734, -0.018013104796409607, -0.15766452252864838, -0.096280045807361603, 0.16995337605476379, };
const TfArray<1, int> tensor_dimension3 = { 1, { 18 } };
const ALIGN(16) float tensor_data4[25] = { 0.16541554033756256, 0.038637157529592514, 0.61546933650970459, 0.27196419239044189, 0.11704850196838379, 0.035399060696363449, 0.26498457789421082, -0.01974053680896759, 0.051391381770372391, 0.20002093911170959, -0.050589825958013535, 0.27740854024887085, 0.15187126398086548, 0.46644175052642822, 0.085810825228691101, 0.00049866735935211182, -0.042840089648962021, 0.15238137543201447, 0.20863267779350281, 0.096881136298179626, 0.17338269948959351, 0.33379766345024109, 0.10623031109571457, -0.16584037244319916, 0.51173871755599976, };
const TfArray<1, int> tensor_dimension4 = { 1, { 25 } };
const ALIGN(16) float tensor_data5[25*33] = { 
  -0.1652824729681015, 0.10789277404546738, -0.23925961554050446, 0.1457287073135376, -0.088067248463630676, 0.1716226190328598, 0.098473481833934784, -0.21375980973243713, 0.026580225676298141, -0.31566807627677917, -0.57793241739273071, -0.22928319871425629, 0.45907160639762878, -0.28123050928115845, 0.11896997690200806, 0.24710731208324432, 0.23602283000946045, -0.35835716128349304, 0.35189956426620483, -0.35630545020103455, -0.61471742391586304, -0.44878920912742615, 0.37156546115875244, 0.29321655631065369, -0.050467260181903839, 0.39963451027870178, -0.3896293044090271, 0.13876087963581085, -0.13089567422866821, 0.042645908892154694, -0.02805577777326107, 0.035829771310091019, -0.069678016006946564, 
  0.12875959277153015, 0.27446970343589783, 0.11257206648588181, 0.13251008093357086, 0.35861390829086304, 0.11164574325084686, 0.41633650660514832, 0.39860305190086365, 0.18965591490268707, -0.2055705189704895, -0.16060531139373779, -0.3851563036441803, -0.17133574187755585, -0.10014288872480392, 0.24859814345836639, -0.16250722110271454, -0.040310915559530258, -0.097206689417362213, 0.060932017862796783, 0.01984049379825592, -0.45328539609909058, -0.4899590015411377, 0.30613580346107483, 0.28239843249320984, 0.30970430374145508, -0.0025233672931790352, -0.11075917631387711, 0.25259852409362793, 0.25768223404884338, 0.12139409780502319, -0.025123091414570808, -0.24722340703010559, -0.098608307540416718, 
  -0.033731207251548767, 0.31824317574501038, -0.00082191330147907138, -0.35372617840766907, 0.0034136893227696419, -0.0451362244784832, -0.20679347217082977, -0.22915084660053253, -0.1561165452003479, -0.23571622371673584, -0.28386831283569336, -0.10121952742338181, -0.23761874437332153, -0.046851258724927902, -0.11149086803197861, -0.28794372081756592, 0.10965268313884735, -0.36864525079727173, 0.3498806357383728, -0.28532281517982483, 0.1545102447271347, 0.2256661057472229, 0.1757386177778244, 0.21777306497097015, -0.15982016921043396, 0.10377829521894455, -0.23527146875858307, 0.018719086423516273, 0.041851986199617386, -0.23884162306785583, -0.06118972972035408, -0.27635675668716431, 0.3326297402381897, 
  -0.27538993954658508, 0.12323139607906342, -0.080145329236984253, 0.44896706938743591, 0.39538708329200745, 0.0080455010756850243, -0.0095380851998925209, 0.043078400194644928, 0.22357980906963348, 0.48299306631088257, 0.83894181251525879, 0.19780841469764709, -0.067990779876708984, 0.18648996949195862, 0.0078371409326791763, -0.19564720988273621, -0.077721752226352692, 0.08620838075876236, 0.15398001670837402, 0.60226291418075562, 0.55229896306991577, 0.18984584510326385, 0.16272513568401337, 0.095866002142429352, 0.13384753465652466, 0.24312220513820648, 0.19761975109577179, 0.13739569485187531, 0.3117692768573761, -0.023654945194721222, 0.17538036406040192, 0.28407689929008484, 0.5032762885093689, 
  0.0078952331095933914, 0.16068622469902039, 0.325519859790802, 0.091760024428367615, 0.098493345081806183, -0.06879878044128418, 0.23903335630893707, 0.23368342220783234, -0.11496050655841827, -0.23325082659721375, -0.82980871200561523, -0.27540487051010132, -0.0025626004207879305, -0.032643076032400131, -0.19806641340255737, 0.15910027921199799, 0.051266863942146301, -0.25588411092758179, -0.13128551840782166, -0.62666177749633789, -0.6500059962272644, -0.59168213605880737, -0.003001651493832469, -0.19048446416854858, 0.030838310718536377, 0.10471869260072708, 0.13129180669784546, 0.14277198910713196, -0.20403893291950226, -0.038304932415485382, -0.22686974704265594, 0.093129470944404602, -0.23974558711051941, 
  0.21790897846221924, -0.26943537592887878, -0.0046300683170557022, -0.043997369706630707, 0.017448229715228081, 0.096574276685714722, 0.051882833242416382, 0.44859561324119568, -0.28784140944480896, 0.26450276374816895, -0.36947086453437805, -0.045411530882120132, 0.0035668257623910904, -0.32095789909362793, 0.18387755751609802, -0.12353239953517914, -0.12600690126419067, -0.04119931161403656, 0.12174730002880096, -0.38930207490921021, -0.24770662188529968, -0.66238653659820557, 0.12777505815029144, -0.13218270242214203, 0.15947943925857544, -0.0094702523201704025, -0.30659884214401245, 0.086318671703338623, 0.14421422779560089, -0.094429835677146912, -0.075295068323612213, -0.078060828149318695, -0.053500369191169739, 
  -0.20955094695091248, 0.19475917518138885, 0.19981005787849426, 0.13224148750305176, 0.28765243291854858, 0.14717476069927216, -0.21150700747966766, 0.17023742198944092, -0.05470111221075058, 0.38786089420318604, 0.2940790057182312, -0.078726209700107574, 0.15893401205539703, 0.053206015378236771, 0.20124609768390656, 0.14832302927970886, 0.20795527100563049, 0.044991243630647659, -0.19569337368011475, 0.1780523955821991, 0.052583854645490646, 0.28031662106513977, 0.083664789795875549, 0.065044373273849487, 0.20567639172077179, 0.13895134627819061, 0.060298040509223938, -0.20206959545612335, -0.0099349468946456909, 0.34887221455574036, 0.11901740729808807, -0.033703774213790894, 0.52128946781158447, 
  -0.059923969209194183, 0.24030442535877228, -0.26705124974250793, -0.0070906537584960461, 0.29012382030487061, 0.073513053357601166, 0.29679217934608459, 0.39745998382568359, 0.27132934331893921, -0.19277158379554749, -0.0025166596751660109, 0.17908966541290283, 0.0092732235789299011, 0.20667068660259247, 0.026677906513214111, -0.14505191147327423, 0.06606302410364151, 0.043276496231555939, 0.33589139580726624, -0.004793824627995491, -0.2620810866355896, -0.31361177563667297, 0.41898247599601746, -0.19885511696338654, -0.16058555245399475, 0.035604435950517654, 0.15787301957607269, 0.014019985683262348, 0.19959793984889984, -0.090783149003982544, 0.14468397200107574, -0.029438508674502373, 0.14419770240783691, 
  0.16675101220607758, 0.17623865604400635, 0.33480438590049744, 0.080408856272697449, 0.0039878073148429394, 0.14406563341617584, -0.14750032126903534, 0.37624871730804443, -0.42286837100982666, 0.22000981867313385, -0.1814931184053421, -0.060501258820295334, -0.14470465481281281, -0.21042510867118835, -0.034552440047264099, 0.28447932004928589, -0.045347612351179123, -0.1771770715713501, -0.044514525681734085, -0.19260728359222412, 0.024867016822099686, -0.16590762138366699, -0.025456437841057777, 0.13197927176952362, -0.07133425772190094, 0.35417988896369934, 0.20188724994659424, -0.00043972942512482405, 0.012128910049796104, 0.28141477704048157, -0.2805386483669281, 0.0063709579408168793, -0.09102766215801239, 
  0.021287111565470695, -0.17711089551448822, 0.20794017612934113, 0.082200266420841217, -0.086666204035282135, 0.19433167576789856, -0.2323070764541626, -0.045002054423093796, 0.029469575732946396, -0.15446577966213226, -0.46364840865135193, -0.28537666797637939, -0.16832686960697174, -0.13076335191726685, -0.20205120742321014, 0.058265566825866699, 0.10043416172266006, -0.050290051847696304, 0.25398686528205872, 0.0091601787135004997, -0.4720701277256012, -0.51858365535736084, 0.36048689484596252, 0.13923187553882599, -0.25332781672477722, -0.0017615598626434803, 0.20799089968204498, -0.1380024254322052, 0.13850408792495728, -0.010879635810852051, -0.2111363410949707, -0.18603764474391937, -0.45826181769371033, 
  -0.32158347964286804, 0.27434772253036499, -0.02672208659350872, 0.024643544107675552, -0.22615475952625275, -0.14569284021854401, -0.18000476062297821, -0.20587390661239624, 0.048558536916971207, 0.071790419518947601, 0.32357016205787659, 0.32536852359771729, -0.27541866898536682, 0.084429517388343811, 0.1963527500629425, 0.3780803382396698, -0.23914620280265808, -0.24306485056877136, -0.20117716491222382, -0.10374972969293594, 0.26796638965606689, 0.37567675113677979, -0.1079212948679924, 0.041349612176418304, 0.34213337302207947, -0.063072875142097473, 0.18609565496444702, -0.14302963018417358, -0.061310697346925735, -0.13222695887088776, 0.21973907947540283, -0.10236477851867676, -0.02598586305975914, 
  0.42580699920654297, 0.65825885534286499, 0.019756710156798363, -0.023154068738222122, 0.22050492465496063, 0.0049188858829438686, -0.21406000852584839, -0.17211730778217316, -0.1872841864824295, -0.37499389052391052, -0.98898589611053467, 0.42427775263786316, 0.32503399252891541, 0.47026902437210083, 0.25698038935661316, 0.069675490260124207, 0.19910155236721039, -0.24987757205963135, -0.018015563488006592, -0.12467801570892334, -0.15088085830211639, -0.20499323308467865, -0.097017847001552582, 0.24547916650772095, -0.25073003768920898, 0.068683221936225891, -0.055294953286647797, -0.083226345479488373, -0.17083173990249634, -0.11851208657026291, 0.10453218966722488, -0.30646169185638428, -0.81326168775558472, 
  0.11302805691957474, 0.15833097696304321, 0.11518909782171249, -0.35122555494308472, -0.18134342133998871, 0.035151787102222443, -0.2137434184551239, -0.57873016595840454, -0.2398449182510376, -0.025450341403484344, -0.73310315608978271, -0.27498742938041687, -0.27534106373786926, -0.011405565775930882, 0.17732159793376923, -0.076242759823799133, -0.33916214108467102, -0.18238332867622375, 0.11437461525201797, -0.4272274374961853, -0.40720841288566589, -0.62763118743896484, -0.010843024589121342, 0.3371029794216156, 0.20461402833461761, 0.046135973185300827, 0.10268715023994446, 0.005881201010197401, -0.19884346425533295, 0.28156110644340515, -0.25339046120643616, 0.042293667793273926, -0.51403152942657471, 
  0.1255418062210083, 0.17710345983505249, 0.18787325918674469, 0.11285221576690674, -0.09255807101726532, 0.052365835756063461, 0.0087490249425172806, -0.82998007535934448, 0.26894435286521912, -0.31079906225204468, -0.46756991744041443, -0.33348307013511658, 0.17763543128967285, -0.11103259772062302, 0.21654669940471649, 0.075863644480705261, -0.032516516745090485, -0.020264511927962303, 0.075077690184116364, -0.65093058347702026, 0.054099693894386292, 0.121810682117939, 0.34913733601570129, 0.24407446384429932, -0.26785391569137573, 0.051563728600740433, -0.23233705759048462, 0.18410173058509827, 0.19273835420608521, 0.19444429874420166, -0.3138592541217804, 0.14065362513065338, -0.56081318855285645, 
  -0.18099218606948853, -0.078324869275093079, 0.22256836295127869, -0.18663565814495087, 0.14981129765510559, 0.050603866577148438, 0.14771856367588043, 0.33679327368736267, -0.0035877635236829519, 0.44592073559761047, 0.70279061794281006, 0.16046757996082306, -0.15458640456199646, 0.12902618944644928, 0.15497849881649017, -0.30266782641410828, 0.090644888579845428, 0.2181771993637085, 0.024711372330784798, 0.56291645765304565, 0.30387365818023682, 0.41444814205169678, 0.23914794623851776, -0.0069754049181938171, 0.045562658458948135, -0.17710119485855103, 0.31819635629653931, -0.052895631641149521, -0.21319840848445892, 0.25258821249008179, -0.070400834083557129, 0.31753373146057129, 0.58505147695541382, 
  -0.19213554263114929, -0.17492558062076569, -0.047730684280395508, 0.28689649701118469, 0.29571264982223511, -0.21054761111736298, 0.014605463482439518, 0.22418828308582306, -0.18867000937461853, -0.21248617768287659, -0.14788013696670532, -0.0086981151252985001, -0.23709765076637268, -0.070086449384689331, 0.23268240690231323, -0.039513278752565384, 0.072559289634227753, 0.27349600195884705, -0.086029931902885437, -0.080004282295703888, -0.025218302384018898, 0.14652104675769806, 0.18022593855857849, -0.26371106505393982, -0.28718319535255432, 0.064677365124225616, 0.29526183009147644, 0.29232627153396606, -0.074702106416225433, 0.21568001806735992, 0.32500061392784119, -0.024292320013046265, 0.28104385733604431, 
  -0.26004308462142944, -0.04399002343416214, -0.13524971902370453, -0.0048786071129143238, -0.042883995920419693, 0.2181914895772934, -0.18929331004619598, 0.27293208241462708, -0.00011226058268221095, -0.075545266270637512, -0.24044384062290192, -0.23913981020450592, 0.10823678970336914, -0.31378388404846191, 0.044843394309282303, 0.19346721470355988, -0.17690049111843109, -0.27669686079025269, -0.28733775019645691, 0.17092262208461761, 0.082478486001491547, 0.12266632914543152, 0.031184220686554909, 0.14818713068962097, -0.026350179687142372, -0.35047498345375061, -0.071813657879829407, 0.18563826382160187, 0.042050857096910477, 0.13255591690540314, -0.019732899963855743, -0.16790975630283356, 0.049216918647289276, 
  -0.080630630254745483, -0.0065411301329731941, -0.010083026252686977, 0.23719078302383423, -0.28890112042427063, -0.030673641711473465, 0.19367434084415436, -0.11176158487796783, -0.20507252216339111, -0.34151008725166321, -0.82773840427398682, 0.18323330581188202, 0.045902464538812637, -0.11762845516204834, -0.011257187463343143, 0.064101316034793854, -0.17473782598972321, -0.083936527371406555, 0.15499161183834076, -0.5932580828666687, -0.33248940110206604, -0.5513232946395874, 0.23073135316371918, 0.083555862307548523, 0.26013961434364319, -0.19005663692951202, -0.2226395308971405, -0.17105922102928162, -0.39832183718681335, -0.033463932573795319, 0.058580812066793442, 0.26684951782226562, -0.75266724824905396, 
  -0.20577895641326904, 0.038711857050657272, -0.32381558418273926, 0.038096468895673752, 0.088203445076942444, 0.042427297681570053, -0.12124215066432953, -0.31455698609352112, -0.48575595021247864, -0.095353081822395325, -0.77504432201385498, 0.087706685066223145, 0.39110532402992249, 0.054262299090623856, 0.20904891192913055, 0.28071337938308716, 0.12752005457878113, 0.24886702001094818, -0.0064177731983363628, -0.45235311985015869, -0.39270341396331787, -0.35514798760414124, 0.41878166794776917, 0.1468682736158371, 0.28429275751113892, 0.091079935431480408, 0.16620281338691711, 0.17675688862800598, 0.25663661956787109, 0.021060789003968239, -0.069860585033893585, -0.29782223701477051, -0.58633315563201904, 
  -0.064843825995922089, -0.10570517182350159, 0.15778480470180511, 0.17656680941581726, -0.24728202819824219, -0.045016977936029434, 0.015031621791422367, -0.26141649484634399, 0.0034026377834379673, -0.11292676627635956, -0.53045207262039185, -0.077971138060092926, 0.089650571346282959, -0.20423717796802521, 0.098493501543998718, -0.19684618711471558, -0.051417723298072815, -0.25409653782844543, 0.32775503396987915, -0.049951460212469101, 0.034606296569108963, -0.11005759239196777, 0.2976568341255188, 0.07959292083978653, -0.29221665859222412, -0.29451146721839905, -0.14200924336910248, 0.34456163644790649, 0.010926265269517899, 0.2982248067855835, -0.17396962642669678, -0.16959390044212341, -0.59452593326568604, 
  -0.24490754306316376, -0.029725883156061172, -0.30477163195610046, 0.062887899577617645, -0.056066166609525681, 0.17062486708164215, -0.067502371966838837, 0.12917403876781464, 0.068645596504211426, 0.36016097664833069, 0.80297136306762695, 0.56617504358291626, 0.41245663166046143, 0.28086355328559875, 0.053888764232397079, 0.23766987025737762, -0.19739402830600739, 0.020924841985106468, -0.28159216046333313, 0.16083455085754395, 0.062606871128082275, 0.37502577900886536, 0.20136617124080658, 0.089280113577842712, -0.17776800692081451, 0.12365667521953583, 0.063840582966804504, 0.25743201375007629, -0.13864484429359436, 0.081019900739192963, 0.15447217226028442, 0.41326221823692322, 0.66124296188354492, 
  0.098175078630447388, 0.22806127369403839, -0.038312472403049469, -0.14371737837791443, 0.1827942281961441, 0.0038668597117066383, 0.16570372879505157, -0.39816784858703613, -0.40889576077461243, -0.46760809421539307, -1.0102746486663818, -0.20743557810783386, -0.017952017486095428, 0.23455564677715302, 0.11858666688203812, 0.022142333909869194, -0.10754469782114029, 0.28654015064239502, 0.27946898341178894, -0.18619722127914429, -0.14739203453063965, -0.32397279143333435, -0.068812251091003418, 0.54460674524307251, 0.36942625045776367, -0.09288584440946579, -0.035467207431793213, 0.089629054069519043, -0.02482454851269722, 0.28257721662521362, 0.2857336699962616, 0.073793955147266388, -0.49848219752311707, 
  -0.22358982264995575, -0.027044553309679031, -0.089640744030475616, 0.25011721253395081, -0.37557289004325867, -0.1606193482875824, 0.040600582957267761, -0.24736551940441132, -0.13695736229419708, -0.27582353353500366, -0.37867456674575806, -0.074526011943817139, -0.15246616303920746, -0.19486846029758453, -0.3658173680305481, 0.24683348834514618, 0.013822362758219242, -0.34662604331970215, 0.16739851236343384, -0.0093870516866445541, -0.16481934487819672, -0.38117572665214539, 0.34229734539985657, 0.32821005582809448, 0.29367461800575256, -0.20486642420291901, 0.27833837270736694, -0.07229498028755188, -0.080294229090213776, 0.15555772185325623, -0.47111904621124268, 0.076057039201259613, -0.52971410751342773, 
  -0.067652404308319092, -0.054022867232561111, 0.26414158940315247, 0.31954890489578247, -0.18435798585414886, -0.068368211388587952, 0.33022385835647583, 0.59432125091552734, -0.12434303015470505, 0.18164590001106262, 0.45552545785903931, -0.1342599093914032, -0.1527194082736969, -0.075682297348976135, 0.17120541632175446, 0.011072365567088127, -0.1498885452747345, -0.10531863570213318, -0.11440123617649078, 0.20967181026935577, 0.090114660561084747, 0.15862879157066345, 0.24396154284477234, -0.18760927021503448, 0.25791913270950317, -0.042433694005012512, 0.15406353771686554, 0.16698873043060303, 0.082406088709831238, 0.038161817938089371, 0.088735155761241913, 0.21556593477725983, 0.40932542085647583, 
  0.35459449887275696, 0.42644962668418884, -0.024691112339496613, 0.06906823068857193, -0.18312712013721466, 0.0025101248174905777, 0.1611044853925705, -0.18343117833137512, -0.017079973593354225, -0.22667627036571503, -0.75568097829818726, 0.3651544451713562, 0.080534361302852631, 0.45317620038986206, -0.07588253915309906, 0.028679739683866501, -0.0056271483190357685, 0.0072417641058564186, 0.13709893822669983, -0.10568346828222275, 0.26366466283798218, -0.40192273259162903, -0.057200592011213303, 0.04217224195599556, -0.18588368594646454, 0.015927072614431381, 0.085357517004013062, 0.051012217998504639, 0.091589048504829407, 0.15953226387500763, -0.42372629046440125, -0.17800615727901459, -0.95772594213485718, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 25,33 } };
const ALIGN(16) float tensor_data6[18*25] = { 
  -0.4339573085308075, 0.2652839720249176, 0.73430752754211426, 0.54761451482772827, -0.072349615395069122, -0.15774936974048615, 0.31298086047172546, -0.49330601096153259, 0.090385831892490387, -0.11930564790964127, -0.19912037253379822, -0.18045412003993988, 0.15475757420063019, 0.41667002439498901, 0.33485513925552368, -0.36298602819442749, 0.25309509038925171, -0.34824639558792114, -0.34240880608558655, -0.44121435284614563, 0.49682652950286865, -0.4097137451171875, -0.46327713131904602, 0.10037922114133835, 0.26272702217102051, 
  -0.035929370671510696, 0.22347904741764069, -0.61617761850357056, -0.032253716140985489, 0.23294074833393097, -0.31765764951705933, -0.013357408344745636, 0.057110469788312912, -0.25989508628845215, 0.1422516405582428, 0.24903666973114014, 0.76711982488632202, 0.19449988007545471, 0.20418077707290649, -0.31105378270149231, 0.32790088653564453, 0.14786134660243988, 0.16469419002532959, 0.3948407769203186, 0.32831192016601562, 0.20563140511512756, 0.4258996844291687, 0.34203115105628967, 0.10863593220710754, 0.59788298606872559, 
  -0.13019487261772156, 0.19551143050193787, -0.37695208191871643, -0.15792150795459747, -0.0043298066593706608, 0.23727726936340332, -0.19117583334445953, 0.42686808109283447, -0.052666302770376205, 0.11042609065771103, -0.26455551385879517, 0.64928704500198364, 0.21280720829963684, 0.31674873828887939, -0.21163776516914368, -0.15412794053554535, -0.12202310562133789, 0.40740874409675598, 0.37428781390190125, 0.017480047419667244, 0.26017707586288452, 0.50788462162017822, -0.19978143274784088, -0.1840163916349411, 0.52448606491088867, 
  -0.17337213456630707, -0.22876589000225067, 0.81953924894332886, 0.1744878739118576, -0.090733177959918976, -0.18416447937488556, -0.12026918679475784, -0.41042163968086243, -0.0079034212976694107, -0.3195757269859314, 0.032000385224819183, 0.17968697845935822, -0.01629086397588253, -0.099316626787185669, 0.17881055176258087, 0.12602245807647705, 0.0006766618462279439, 0.076378457248210907, 0.25351342558860779, -0.33881929516792297, 0.57367414236068726, -0.20050427317619324, -0.098110362887382507, -0.077344290912151337, 0.3651561439037323, 
  -0.10789427161216736, 0.034833803772926331, 0.4060903787612915, 0.091456949710845947, 0.18643267452716827, 0.44037407636642456, -0.094692893326282501, 0.23081734776496887, 0.035866204649209976, 0.11418116092681885, 0.32732117176055908, 0.0049013206735253334, -0.34543612599372864, -0.091582395136356354, 0.26714465022087097, -0.35161042213439941, 0.27186155319213867, -0.19541233777999878, -0.19708102941513062, -0.33376595377922058, 0.085686147212982178, -0.33171439170837402, -0.19262002408504486, 0.35731905698776245, -0.17244532704353333, 
  0.025106325745582581, -0.4241238534450531, 0.68482512235641479, 0.52441304922103882, -0.48284709453582764, -0.45753875374794006, 0.30659589171409607, -0.30646347999572754, -0.45359140634536743, -0.23565973341464996, -0.56010699272155762, -0.062716767191886902, -0.21261970698833466, 0.55732351541519165, 0.43384790420532227, -0.70352649688720703, 0.13087700307369232, -0.21318328380584717, -0.0090804817155003548, -0.53486150503158569, 0.59550631046295166, 0.015154131688177586, -0.53865271806716919, -0.31587624549865723, 0.30710521340370178, 
  0.28099867701530457, -0.18270017206668854, 0.24266904592514038, -0.07908986508846283, -0.34847468137741089, 0.29912072420120239, -0.34820163249969482, -0.33924061059951782, 0.0099632972851395607, -0.28387013077735901, 0.13339121639728546, 0.21478903293609619, -0.024189269170165062, -0.1704283207654953, -0.09815264493227005, -0.30876415967941284, -0.012808561325073242, -0.33445838093757629, -0.16662052273750305, 0.20396327972412109, 0.014525772072374821, 0.32279512286186218, 0.22613775730133057, -0.33522188663482666, -0.28933089971542358, 
  -0.00074974400922656059, -0.27116468548774719, 0.46649545431137085, 0.36774730682373047, -0.22806701064109802, 0.15740843117237091, 0.31366080045700073, -0.2667064368724823, -0.37949031591415405, 0.42141491174697876, -0.20301046967506409, 0.30281922221183777, 0.26493158936500549, -0.0084869330748915672, -0.031190712004899979, 0.044915884733200073, -0.23153524100780487, 0.082724861800670624, 0.48340418934822083, 0.10283474624156952, -0.11323028802871704, 0.59436208009719849, -0.18029665946960449, 0.13019971549510956, 0.29087620973587036, 
  -0.38349568843841553, -0.0043601980432868004, -0.028143826872110367, 0.258302241563797, -0.28240907192230225, -0.19021528959274292, 0.25918793678283691, 0.039081767201423645, -0.044309206306934357, -0.007985258474946022, -0.036973170936107635, 0.2896932065486908, 0.10838627815246582, 0.22291819751262665, 0.35530078411102295, 0.23464718461036682, 0.1761186420917511, -0.39891925454139709, -0.13621729612350464, -0.0062489211559295654, 0.1737644374370575, 0.042979791760444641, 0.023164805024862289, -0.0042490907944738865, -0.20090483129024506, 
  0.16017651557922363, -0.16372628509998322, -0.57384753227233887, 0.13490244746208191, -0.14406780898571014, -0.2657967209815979, 0.2721000611782074, 0.26707640290260315, 0.2765771746635437, 0.24642862379550934, -0.053197585046291351, 0.71362167596817017, -0.040934402495622635, 0.16514503955841064, -0.21332696080207825, -0.33974719047546387, 0.30614924430847168, 0.35272440314292908, 0.17869603633880615, 0.41883945465087891, 0.061302848160266876, 0.4262310266494751, 0.31182569265365601, -0.32064840197563171, 0.69635611772537231, 
  -0.034345980733633041, -0.099289104342460632, 0.80597221851348877, -0.040123838931322098, 0.21241839230060577, -0.25770005583763123, 0.24729186296463013, -0.062215331941843033, -0.04499281570315361, 0.30727189779281616, -0.042655684053897858, -0.39127218723297119, -0.29860779643058777, 0.35324209928512573, -0.17164896428585052, -0.28940704464912415, -0.048931792378425598, -0.16744126379489899, -0.0099032921716570854, 0.22775667905807495, 0.1913457065820694, 0.15981119871139526, 0.1677241325378418, -0.39617800712585449, 0.31708204746246338, 
  0.084634207189083099, 0.18196308612823486, -0.53124475479125977, -0.039932519197463989, 0.4048362672328949, 0.029793392866849899, 0.14117224514484406, 0.11112640053033829, 0.31417497992515564, 0.16673193871974945, -0.35150453448295593, 0.4723031222820282, 0.37300920486450195, -0.018113510683178902, -0.31535318493843079, -0.12028295546770096, -0.36315014958381653, 0.19904449582099915, -0.12466719746589661, 0.02700253389775753, -0.18813180923461914, -0.1266247034072876, 0.061808977276086807, 0.18110215663909912, 0.5484154224395752, 
  0.27023029327392578, 0.080030299723148346, 0.28287550806999207, 0.27780216932296753, -0.23424357175827026, -0.12650610506534576, 0.40108463168144226, 0.35668611526489258, 0.035250548273324966, -0.32119810581207275, -0.034666027873754501, -0.31846711039543152, 0.082332395017147064, -0.38569319248199463, 0.050661530345678329, 0.043806500732898712, -0.19747819006443024, -0.20505404472351074, 0.32209423184394836, -0.028439810499548912, 0.53426128625869751, -0.09322713315486908, -0.33818307518959045, 0.26387760043144226, 0.010585458017885685, 
  -0.10079274326562881, 0.084507487714290619, -0.2839808464050293, -0.14039798080921173, 0.27996489405632019, 0.24419651925563812, -0.15556389093399048, -0.11257654428482056, -0.20417293906211853, -0.080922462046146393, -0.22495903074741364, 0.23926331102848053, -0.28188103437423706, -0.42466011643409729, -0.34839782118797302, 0.071525730192661285, -0.24395561218261719, -0.27153342962265015, -0.11177653819322586, 0.23132108151912689, 0.20304283499717712, 0.13968713581562042, 0.21070259809494019, -0.22502407431602478, -0.019618989899754524, 
  0.12293148040771484, 0.05363420769572258, -0.5927886962890625, 0.42046946287155151, 0.35781851410865784, 0.19010007381439209, 0.33024471998214722, -0.21611329913139343, 0.32975560426712036, -0.072723306715488434, 0.038545865565538406, -0.31387990713119507, 0.087931640446186066, 0.49530687928199768, 0.22310720384120941, 0.093544892966747284, 0.22530484199523926, 0.24988305568695068, 0.13835373520851135, -0.020228622481226921, -0.0061435126699507236, -0.098106637597084045, 0.49123817682266235, 0.24369001388549805, -0.23878182470798492, 
  0.39284449815750122, -0.328574538230896, -0.027953600510954857, 0.34389615058898926, 0.19409197568893433, -0.40654605627059937, -0.056083939969539642, -0.17402784526348114, -0.0031022173352539539, -0.076601922512054443, 0.40247771143913269, 0.18984593451023102, 0.12313044816255569, -0.3227725625038147, 0.078529872000217438, -0.23770467936992645, 0.18466146290302277, 0.28234884142875671, 0.36314994096755981, -0.31536802649497986, 0.46830493211746216, -0.24242156744003296, 0.15579797327518463, 0.17801792919635773, -0.44522318243980408, 
  -0.2267410010099411, -0.34658056497573853, -0.1432555764913559, 0.037681370973587036, -0.11862869560718536, -0.22591204941272736, -0.39219638705253601, 0.12411859631538391, -0.3453422486782074, 0.31046703457832336, -0.17732925713062286, 0.43994602560997009, 0.14617002010345459, -0.45930281281471252, -0.047768566757440567, 0.2424737960100174, 0.22045251727104187, -0.034697514027357101, 0.23100674152374268, -0.086149856448173523, 0.15129202604293823, 0.07368149608373642, 0.13035491108894348, 0.24516640603542328, 0.11432024836540222, 
  0.40445607900619507, 0.058960091322660446, -0.011520474217832088, -0.16243068873882294, 0.29745209217071533, 0.16601234674453735, -0.28202810883522034, 0.025252543389797211, -0.17160449922084808, 0.40389549732208252, 0.14123052358627319, 0.53747385740280151, 0.36288401484489441, 0.48737373948097229, -0.16042579710483551, -0.28331008553504944, 0.30721226334571838, -0.1447281539440155, 0.04562079906463623, -0.037944905459880829, 0.064847990870475769, 0.064611099660396576, -0.0095426999032497406, 0.042810983955860138, 0.54103904962539673, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 18,25 } };
const ALIGN(16) float tensor_data7[11*18] = { 
  -0.072909682989120483, 0.47261613607406616, 0.4818357527256012, -0.03503815084695816, -0.098890036344528198, -0.35747787356376648, 0.33407127857208252, -0.0051631489768624306, -0.2118489146232605, 0.66038972139358521, -0.15536808967590332, -0.0081415185704827309, 0.11873796582221985, -0.022658221423625946, 0.40302777290344238, 0.41925147175788879, 0.024014825001358986, 0.3104221522808075, 
  0.35162648558616638, 0.05426696315407753, -0.18589848279953003, 0.55083101987838745, -0.27541112899780273, 0.89925539493560791, -0.23798255622386932, 0.47597122192382812, 0.055708058178424835, 0.2887343168258667, 0.52707058191299438, -0.48306787014007568, -0.063112743198871613, -0.23789002001285553, -0.19630764424800873, -0.12655378878116608, -0.53128969669342041, -0.17489396035671234, 
  -0.45808923244476318, 0.1994619220495224, -0.33849990367889404, -0.43325275182723999, 0.10209169983863831, -0.32022863626480103, -0.27187526226043701, -0.38564276695251465, -0.32770612835884094, -0.10033112764358521, 0.23837399482727051, -0.43238601088523865, -0.43204775452613831, 0.12469325959682465, -0.14456142485141754, -0.17244622111320496, -0.28957784175872803, 0.13685327768325806, 
  -0.34362927079200745, 0.49616563320159912, 0.5494646430015564, 0.19337922334671021, -0.14879557490348816, 0.21086122095584869, 0.39203643798828125, -0.23966819047927856, 0.030854275450110435, 0.38256844878196716, -0.14925609529018402, 0.2480366975069046, -0.45516496896743774, -0.32656055688858032, -0.20455493032932281, -0.08488842099905014, -0.138243168592453, 0.61979377269744873, 
  -0.12458980083465576, 0.12663297355175018, 0.28024312853813171, 0.76544839143753052, -0.27207973599433899, 0.094973191618919373, -0.3701193630695343, -0.016820050776004791, 0.41976660490036011, 0.4636092483997345, -0.77461344003677368, -0.048465181142091751, 0.45254343748092651, -0.22337870299816132, -0.35252493619918823, 0.20468798279762268, -0.32890811562538147, -0.2533537745475769, 
  -0.07018744945526123, 0.34977591037750244, 0.24540811777114868, -0.49626335501670837, -0.47095850110054016, -0.28887003660202026, 0.054708532989025116, 0.14891023933887482, 0.017886362969875336, 0.6450762152671814, -0.14774139225482941, 0.31747648119926453, -0.51035749912261963, -0.33718490600585938, 0.014391710981726646, -0.2457684725522995, 0.52629202604293823, 0.5989067554473877, 
  -0.11812575161457062, 0.19184346497058868, -0.068873047828674316, 0.68469768762588501, -0.40562927722930908, 0.53883534669876099, 0.082298636436462402, 0.5337824821472168, 0.24478109180927277, -0.02666628360748291, 1.1875948905944824, 0.034553784877061844, -0.52492821216583252, -0.15245765447616577, -0.2422717958688736, -0.64570325613021851, -0.53283846378326416, 0.3816530704498291, 
  0.22846817970275879, 0.13677497208118439, -0.18997751176357269, 0.49282857775688171, 0.11791211366653442, 0.8673061728477478, 0.0080807367339730263, -0.11080313473939896, 0.13505691289901733, 0.47127807140350342, 0.50840461254119873, -0.090254276990890503, -0.18586494028568268, 0.30351606011390686, -0.45777562260627747, 0.16299340128898621, -0.39454323053359985, 0.23489713668823242, 
  -0.0034130772110074759, -0.039371859282255173, -0.2132335901260376, 0.049705438315868378, 0.36967378854751587, 0.68495380878448486, -0.45691949129104614, 0.35189101099967957, 0.021175302565097809, -0.34834524989128113, 0.32589748501777649, -0.327892005443573, 0.14296068251132965, -0.20835572481155396, -0.0073404987342655659, 0.46577531099319458, -0.4245150089263916, 0.13731518387794495, 
  0.7549060583114624, -0.22202923893928528, -0.40940168499946594, 0.82137012481689453, 0.60297149419784546, 0.87576037645339966, -0.029865896329283714, 0.19891642034053802, 0.44768461585044861, -0.15254683792591095, 0.050611060112714767, 0.13921079039573669, 0.4906916618347168, -0.068757727742195129, 0.46965005993843079, -0.21162685751914978, 0.18638603389263153, 0.24986127018928528, 
  -0.37112197279930115, 0.3079453706741333, 0.18980695307254791, -0.60834318399429321, -0.41188713908195496, -0.52803230285644531, 0.39205294847488403, 0.4840664267539978, -0.41503027081489563, 0.19668225944042206, 0.10075908899307251, 0.28057560324668884, 0.36803603172302246, -0.16825270652770996, 0.046770073473453522, -0.040203269571065903, 0.026513464748859406, 0.48900455236434937, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 11,18 } };
const ALIGN(16) float tensor_data8[5*11] = { 
  0.14665277302265167, -1.257898211479187, -0.55213946104049683, -1.0967390537261963, -1.0788005590438843, 0.70453989505767822, -0.93263798952102661, -0.44141364097595215, -0.80923581123352051, 0.037049587815999985, 0.16248059272766113, 
  0.013849010691046715, -0.23982377350330353, 0.21679812669754028, -0.22736836969852448, -0.28906151652336121, -0.92416828870773315, -1.0948917865753174, -0.12231685221195221, -0.16201472282409668, 0.35606533288955688, -0.73377621173858643, 
  -0.72078424692153931, 0.82238590717315674, -0.30399012565612793, -0.67934411764144897, -0.87429291009902954, -0.55129522085189819, 1.3220868110656738, -0.026162277907133102, 0.34101220965385437, 0.013970615342259407, 0.51069521903991699, 
  0.19457641243934631, -0.68542039394378662, -0.46757659316062927, 0.46235617995262146, 0.17805647850036621, 0.81416362524032593, -0.11582047492265701, -0.13330227136611938, -0.83186495304107666, -0.54912066459655762, -0.64473569393157959, 
  0.35293722152709961, -0.25121143460273743, -0.51187729835510254, 0.038754981011152267, 0.54277360439300537, 0.004865771159529686, -0.85314464569091797, -0.68595480918884277, 0.39143413305282593, -0.79971569776535034, 0.44902291893959045, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 5,11 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,25 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,18 } };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,11 } };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,5 } };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,5 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,5,4 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,3 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,7,2 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,8,1 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 20, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 44, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 100, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3300, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1800, },
  { kTfLiteMmapRo, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 792, },
  { kTfLiteMmapRo, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 220, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension9, 100, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 72, },
  { kTfLiteArenaRw, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension11, 44, },
  { kTfLiteArenaRw, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension12, 20, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 20, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for(size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
